/**
 * generated by Xtext 2.27.0
 */
package mde.pauline.metaheres.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import mde.pauline.metaheres.services.MetaheresGrammarAccess;
import metaheres.Country;
import metaheres.Language;
import metaheres.LotsConfig;
import metaheres.ReservationsConfig;
import metaheres.ResourcesConfig;
import metaheres.ServiceConfig;
import metaheres.ServiceName;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class MetaheresFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MetaheresGrammarAccess _metaheresGrammarAccess;

  protected void _format(final ServiceName serviceName, @Extension final IFormattableDocument document) {
    document.<ServiceConfig>format(serviceName.getServiceconfig());
  }

  protected void _format(final ServiceConfig serviceConfig, @Extension final IFormattableDocument document) {
    EList<Country> _country = serviceConfig.getCountry();
    for (final Country country : _country) {
      document.<Country>format(country);
    }
    EList<Language> _language = serviceConfig.getLanguage();
    for (final Language language : _language) {
      document.<Language>format(language);
    }
    document.<ReservationsConfig>format(serviceConfig.getReservationsconfig());
    EList<ResourcesConfig> _resourcesconfig = serviceConfig.getResourcesconfig();
    for (final ResourcesConfig resourcesConfig : _resourcesconfig) {
      document.<ResourcesConfig>format(resourcesConfig);
    }
    document.<LotsConfig>format(serviceConfig.getLotsconfig());
  }

  public void format(final Object serviceName, final IFormattableDocument document) {
    if (serviceName instanceof XtextResource) {
      _format((XtextResource)serviceName, document);
      return;
    } else if (serviceName instanceof ServiceName) {
      _format((ServiceName)serviceName, document);
      return;
    } else if (serviceName instanceof ServiceConfig) {
      _format((ServiceConfig)serviceName, document);
      return;
    } else if (serviceName instanceof EObject) {
      _format((EObject)serviceName, document);
      return;
    } else if (serviceName == null) {
      _format((Void)null, document);
      return;
    } else if (serviceName != null) {
      _format(serviceName, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(serviceName, document).toString());
    }
  }
}
